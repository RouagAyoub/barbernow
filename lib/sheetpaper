
/*
Form(
      child :Column(
  crossAxisAlignment: CrossAxisAlignment.start,
  mainAxisSize: MainAxisSize.min,
  children: <Widget>[
     Padding(
    padding: EdgeInsets.all(16.0),
    child: TextFormField(
  decoration: InputDecoration(
    labelText: 'Enter your username'
  ),
    ),
  ),
   
   Padding(
    padding: EdgeInsets.all(16.0),
    child: TextFormField(
  decoration: InputDecoration(
    labelText: 'Enter your password',
  ),
  obscureText: true,
    ),
  ),
  
  Center(
  child: FlatButton(
  color: Colors.deepPurple,
  padding: EdgeInsets.fromLTRB(50, 5, 50, 5),
  textColor: Colors.white,
  disabledColor: Colors.grey,
  disabledTextColor: Colors.black,
      onPressed: () async{
      dynamic result = await _auth.signinanonym();
      if(result == null)
      {
        print('prbm sign in');
      }else{
        print(result.uid);
      }
    }, 
    child: Text("SIGN IN")
    ),
  ),
  ],
)
    )
    */

    ///////////////////////////////  2      //////////////////////////////////////

    
            /* ListView(
              children: snapshot.data.documents.map((DocumentSnapshot document) {
                return new ListTile(
                  title: new Text(document['name']),
                  subtitle: new Text(document['place']),
                  onTap: () => Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => Barber(),
                    settings: RouteSettings(
                    arguments: document.documentID,
                  ),
                    )
                    ),
                  
                );
              }).toList(),
            );*/

///////////////////////////////////////////      3        //////////////////////////////////

/* bottomNavigationBar: BottomAppBar(
        shape: const CircularNotchedRectangle(),
        child: Container(
          height: 50.0,
          color: Colors.white,
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          DateTime startDate = await NTP.now();
  print('NTP DateTime: ${startDate}');
          
        final FirebaseUser user = await FirebaseAuth.instance.currentUser();
        DocumentSnapshot snapshot = await Firestore.instance.collection('users').document(user.uid).get();
        
        //print(insto.data['name']);
        //final uid = user.uid;
         var inst = Firestore.instance.collection('barbers').document(idofbarber).collection('listewaiter').document(user.uid);
         inst.setData(
                          {
                            'time':startDate.toString(),
                            'name':snapshot.data['name']
                          }
                        );

        },
        tooltip: 'add to list',
        child: Icon(Icons.add),
      ),*/
      //floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,





      /////////////////////////////////////////////////////   4   ///////////////////////////////////////////////

      
  /*void createData() async {
    if (_formKey.currentState.validate()) {
      _formKey.currentState.save();
      DocumentReference ref = await db.collection('CRUD').add({'name': '$name ðŸ˜Ž', 'todo': randomTodo()});
      setState(() => id = ref.documentID);
      print(ref.documentID);
    }
  }*/

 /* void readData() async {
    DocumentSnapshot snapshot = await db.collection('CRUD').document(id).get();
    print(snapshot.data['name']);
  }

  void updateData(DocumentSnapshot doc) async {
    await db.collection('CRUD').document(doc.documentID).updateData({'todo': 'please ðŸ¤«'});
  }

  void deleteData(DocumentSnapshot doc) async {
    await db.collection('CRUD').document(doc.documentID).delete();
    setState(() => id = null);
  }

  String randomTodo() {
    final randomNumber = Random().nextInt(4);
    String todo;
    switch (randomNumber) {
      case 1:
        todo = 'Like and subscribe ðŸ’©';
        break;
      case 2:
        todo = 'Twitter @robertbrunhage ðŸ¤£';
        break;
      case 3:
        todo = 'Patreon in the description ðŸ¤—';
        break;
      default:
        todo = 'Leave a comment ðŸ¤“';
        break;
    }
    return todo;
  }*/

  //////////////////////////////////////////////////    5   /////////////////////////////////////
   Future<void> _showMyDialog() async {
  return showDialog<void>(
    context: context,
    barrierDismissible: false, // user must tap button!
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text('AlertDialog Title'),
        content: SingleChildScrollView(
          child: ListBody(
            children: <Widget>[
              Text('This is a demo alert dialog.'),
              Text('Would you like to approve of this message?'),
            ],
          ),
        ),
        actions: <Widget>[
          FlatButton(
            child: Text('Approve'),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
        ],
      );
    },
  );
}


/////////////////////////////barberslist/////////////////////////////////////////

/*
  int _selectedIndex = 0;
  String username;
  DocumentSnapshot snapshot;
  final Completer c = new Completer();
  //DocumentSnapshot snapshots;

  /* Future snapshotin(documentation) async {
    snapshot = await Firestore.instance
        .collection('barbers')
        .document(documentation)
        .get();
    print(snapshot.data['posix']);
  }*/

  void separate() async {
    final String idofbarber = ModalRoute.of(context).settings.arguments;
    snapshot = await Firestore.instance
        .collection('barbers')
        .document(idofbarber)
        .get();
    if (snapshot == null) {
      separate();
    } else {}
  }

  /////////////////time/////////////////////////////////////
  String timeplace;
  void getdatetime() async {
    Response response =
        await get('http://worldtimeapi.org/api/timezone/Africa/Algiers');
    Map data = jsonDecode(response.body);
    String offset = data['utc_offset'].substring(1, 3);
    DateTime now = DateTime.parse(data['datetime']);
    now = now.add(Duration(hours: int.parse(offset)));
    timeplace = now.toString();
  }

  //////////////////time ////////////////////////

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  Set<Marker> _createMarker(double posisionlat, double posotionlon) {
    return <Marker>[
      Marker(
          markerId: MarkerId('home'),
          position: LatLng(posisionlat, posotionlon),
          icon: BitmapDescriptor.defaultMarker,
          infoWindow: InfoWindow(title: 'Current Location'))
    ].toSet();
  }

  @override
  Widget build(BuildContext context) {
    final String idofbarber = ModalRoute.of(context).settings.arguments;

    //snapshots = snapshot as DocumentSnapshot;
    //snapshotin(idofbarber);

    final List<Widget> _children = [
      Container(
        child: StreamBuilder<QuerySnapshot>(
          stream: Firestore.instance
              .collection('barbers')
              .document(idofbarber)
              .collection('listewaiter')
              .snapshots(),
          builder:
              (BuildContext context, AsyncSnapshot<QuerySnapshot> snapshot) {
            if (snapshot.hasError) return new Text('Error: ${snapshot.error}');
            switch (snapshot.connectionState) {
              case ConnectionState.waiting:
                return new Center(
                  child: SpinKitRotatingCircle(
                    color: Colors.red[900],
                    size: 50.0,
                  ),
                );
              default:
                return new ListView(
                  children:
                      snapshot.data.documents.map((DocumentSnapshot document) {
                    return new ListTile(
                      title: new Text(
                        document['name'],
                        style: TextStyle(
                            color: Colors.blue[700],
                            fontSize: 25,
                            fontFamily: 'Digital-7'),
                      ),
                      subtitle: new Text(
                        document['time'],
                        style: TextStyle(
                            color: Colors.blue[700],
                            fontSize: 18,
                            fontFamily: 'Digital-7'),
                      ),
                    );
                  }).toList(),
                );
            }
          },
        ),
      ),
      Container(
        child: Text("details"),
      ),
      GoogleMap(
        mapType: MapType.normal,
        markers: _createMarker(snapshot.data['posix'], snapshot.data['posiy']),
        initialCameraPosition: CameraPosition(
          target: LatLng(snapshot.data['posix'], snapshot.data['posiy']),
          zoom: 12.0,
        ),
      )
    ];

    return Scaffold(
      appBar: AppBar(
        title: Text('list client'),
      ),
      body: _children[_selectedIndex],
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          getdatetime();
          try {
            final FirebaseUser user = await FirebaseAuth.instance.currentUser();
            DocumentSnapshot snapshot = await Firestore.instance
                .collection('users')
                .document(user.uid)
                .get();
            var inst = Firestore.instance
                .collection('barbers')
                .document(idofbarber)
                .collection('listewaiter')
                .document(user.uid);
            inst.setData({'time': timeplace, 'name': snapshot.data['name']});
          } catch (e) {
            showToast(e.toString());
          }
        },
        tooltip: 'add to list',
        child: Icon(Icons.add),
      ),
      //////////////////////////////////////////////////////////  3  ////////////////////////////////////////////

      bottomNavigationBar: BottomNavigationBar(
        backgroundColor: Color.fromARGB(100, 100, 100, 100),
        iconSize: 25,
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.format_list_numbered),
            title: Text('LIST_WAITING'),
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.assignment),
            title: Text('DETAILS'),
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.place),
            title: Text('LOCALISATION'),
          ),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Colors.amber[800],
        onTap: _onItemTapped,
      ),
    );
  }
}
*/
