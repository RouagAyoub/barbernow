
/*
Form(
      child :Column(
  crossAxisAlignment: CrossAxisAlignment.start,
  mainAxisSize: MainAxisSize.min,
  children: <Widget>[
     Padding(
    padding: EdgeInsets.all(16.0),
    child: TextFormField(
  decoration: InputDecoration(
    labelText: 'Enter your username'
  ),
    ),
  ),
   
   Padding(
    padding: EdgeInsets.all(16.0),
    child: TextFormField(
  decoration: InputDecoration(
    labelText: 'Enter your password',
  ),
  obscureText: true,
    ),
  ),
  
  Center(
  child: FlatButton(
  color: Colors.deepPurple,
  padding: EdgeInsets.fromLTRB(50, 5, 50, 5),
  textColor: Colors.white,
  disabledColor: Colors.grey,
  disabledTextColor: Colors.black,
      onPressed: () async{
      dynamic result = await _auth.signinanonym();
      if(result == null)
      {
        print('prbm sign in');
      }else{
        print(result.uid);
      }
    }, 
    child: Text("SIGN IN")
    ),
  ),
  ],
)
    )
    */

    ///////////////////////////////  2      //////////////////////////////////////

    
            /* ListView(
              children: snapshot.data.documents.map((DocumentSnapshot document) {
                return new ListTile(
                  title: new Text(document['name']),
                  subtitle: new Text(document['place']),
                  onTap: () => Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => Barber(),
                    settings: RouteSettings(
                    arguments: document.documentID,
                  ),
                    )
                    ),
                  
                );
              }).toList(),
            );*/

///////////////////////////////////////////      3        //////////////////////////////////

/* bottomNavigationBar: BottomAppBar(
        shape: const CircularNotchedRectangle(),
        child: Container(
          height: 50.0,
          color: Colors.white,
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          DateTime startDate = await NTP.now();
  print('NTP DateTime: ${startDate}');
          
        final FirebaseUser user = await FirebaseAuth.instance.currentUser();
        DocumentSnapshot snapshot = await Firestore.instance.collection('users').document(user.uid).get();
        
        //print(insto.data['name']);
        //final uid = user.uid;
         var inst = Firestore.instance.collection('barbers').document(idofbarber).collection('listewaiter').document(user.uid);
         inst.setData(
                          {
                            'time':startDate.toString(),
                            'name':snapshot.data['name']
                          }
                        );

        },
        tooltip: 'add to list',
        child: Icon(Icons.add),
      ),*/
      //floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,





      /////////////////////////////////////////////////////   4   ///////////////////////////////////////////////

      
  /*void createData() async {
    if (_formKey.currentState.validate()) {
      _formKey.currentState.save();
      DocumentReference ref = await db.collection('CRUD').add({'name': '$name ðŸ˜Ž', 'todo': randomTodo()});
      setState(() => id = ref.documentID);
      print(ref.documentID);
    }
  }*/

 /* void readData() async {
    DocumentSnapshot snapshot = await db.collection('CRUD').document(id).get();
    print(snapshot.data['name']);
  }

  void updateData(DocumentSnapshot doc) async {
    await db.collection('CRUD').document(doc.documentID).updateData({'todo': 'please ðŸ¤«'});
  }

  void deleteData(DocumentSnapshot doc) async {
    await db.collection('CRUD').document(doc.documentID).delete();
    setState(() => id = null);
  }

  String randomTodo() {
    final randomNumber = Random().nextInt(4);
    String todo;
    switch (randomNumber) {
      case 1:
        todo = 'Like and subscribe ðŸ’©';
        break;
      case 2:
        todo = 'Twitter @robertbrunhage ðŸ¤£';
        break;
      case 3:
        todo = 'Patreon in the description ðŸ¤—';
        break;
      default:
        todo = 'Leave a comment ðŸ¤“';
        break;
    }
    return todo;
  }*/

  //////////////////////////////////////////////////    5   /////////////////////////////////////
   Future<void> _showMyDialog() async {
  return showDialog<void>(
    context: context,
    barrierDismissible: false, // user must tap button!
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text('AlertDialog Title'),
        content: SingleChildScrollView(
          child: ListBody(
            children: <Widget>[
              Text('This is a demo alert dialog.'),
              Text('Would you like to approve of this message?'),
            ],
          ),
        ),
        actions: <Widget>[
          FlatButton(
            child: Text('Approve'),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
        ],
      );
    },
  );
}